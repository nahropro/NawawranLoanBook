@page "/Login"
@inject IUserService userService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card shadow-2-strong" style="border-radius: 1rem;">
                    <div class="card-body p-5 text-center">

                        <h3 class="mb-5">چوونەژوورەوە</h3>

                        <EditForm Model="login" OnValidSubmit="SignInAsyn">
                            <DataAnnotationsValidator />

                            <div class="form-outline mb-4">
                                <InputText @bind-Value="login.UserName" class="form-control form-control-lg"
                                           placeholder="ناوی بەكارهێنەر" />
                                <ValidationMessage For="()=> login.UserName" />
                            </div>

                            <div class="form-outline mb-4">
                                <InputText type="password" @bind-Value="login.Password" class="form-control form-control-lg"
                                           placeholder="وشەی نهێنی" />
                                <ValidationMessage For="()=> login.Password" />
                            </div>

                            <div class="alert alert-danger" hidden="@(!loginFailed)">ناوی بەكارهێنەر یان وشەی نهێنی هەڵەیە!</div>

                            <button class="btn btn-primary btn-lg btn-block" type="submit">چوونەژوورەوە</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private LoginResource login = new LoginResource();
    private bool loginFailed = false;

    private async Task SignInAsyn()
    {
        loginFailed = !(await userService.LoginAsync(login));

        if (!loginFailed)
        {
            await authStateProvider.GetAuthenticationStateAsync();
            navManager.NavigateTo("/");
        }
    }
}
